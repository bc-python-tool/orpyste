==========
2016-11-28
==========

----> date ok besoin de documenter partout !!!!! + ajouter test
    + doc python ?
    + doc fr ?
    + readme ?
    + tests ?


ajout de méthode, et no propréité, mydict paramétrable pour usage moins lourdingue mais flatdict et treedict très verbeux reste car utile
    ---> flat ou tree et si possible via un dict standard (pour ne pas avoir à géré index si l'on sait que l'on sait et l'on veut que des clés unique)
    ---> ne garde que les données sans numéro de ligne
    ---> avec ou sans sep

remise à plat, on utilise toujours un dico {"nbline":..., "vlaue"; }

==========
2016-11-22
==========

----> date ok besoin de documenter partout !!!!! + ajouter test
    + doc python ?
    + doc fr ?
    + readme ?
    + tests ? penser à bloc et sous blocs !!!!!

ajout de treedict car flatdict pas toujours bien appropié  du type RecuOrderedDict


==========
2016-11-21
==========

----> date ok besoin de documenter partout !!!!! + ajouter test
    + doc python ?
    + doc fr ?
    + readme ?
    + tests ?

**Refonte importante qui justifie un changement mineur de numéro de version:** pour supporter pleinement l'utilisation du mode ``multikeyval`` il a fallu effectuer les changements essentiels suivants.

    1) Dans le module ``parse.walk``, ajout d'une classe ``MKOrderedDict`` qui est un dictionnaire acceptant un usage répété d'une même clé (en fait, ceci est une nouveauté du package ¨mistool où elle sera maintenue).

    2) ??????
       ??????
       ??????
       ??????
    De grosses modifications dans la classe ``Infos``.

        * Changement complet de la méthode ``rtu_data`` pour prendre en compte le mode ``multikeyval``.

        * L'argument ``islinebyline`` a été supprimé. On récupère toujours le numéro de ligne. Charge à l'application utilisant ¨orpyste de ne pas tenir compte de cette ¨info. On cherche à n'avoir qu'un seul type de sorties car c'est plus simple à maintenir et aussi à utiliser même si l'on a parfois un peu de bruit.

        * ``rtu_data`` renommé en ``rtu``

        * Les arguments ``nosep`` des méthodes ``rtu_data`` et ``flatdict`` ont aussi été supprimés car dorénavant on récupère toujours le séparateur (pour la même raison que ci-dessus).

        * La méthode ``rtu_data`` devient une propriété (utilisation en interne diu décorateur ``@property``).

        de meêm pour flatdict et recudict

        * Suppression de la méthode ``short_rtu_data`` et de ReadBlock.nblineof.

    3) pour data.ReadBlock

        * ??????
          ??????
          ??????
          ??????
        La méthode ``data.ReadBlock.jsonify`` devient une propriété json

        et la fonction ``data.loadjson`` ont dû être mises à jour. format plus verbeux par défaut mais du coup marche pour key et multikey d'où ce choix !!!!! aussi pour indication fine lors ananlyse plus poussé des avaleurs par prog tierce utilisant orpyste

        * Suppression de la méthode ``recudict``.


==========
2016-11-16
==========

**Changement de nom de la méthode ``remove`` de la classe ``parse.WalkInAST`` :** ce nouveau nom est ``remove_extras`` (voir aussi la grande nouveauté ci-après).


**Ajout d'un gestionnaire de contexte à la classe ``parse.WalkInAST`` :** ceci implique que les classes ``data.Read``, ``data.ReadBlock`` et ``clean.Clean`` peuvent s'utiliser via une syntaxe du type ``with .... as ...:`` au lieu de faire appel aux méthodes ``build`` et ``remove_extras``.


==========
2016-11-15
==========

**Retour au nom ``tools``:** ceci répond à des spécifications personnelles de l'auteur de ¨orpyste (soyons cohérent avec nous-même).


==========
2016-11-10
==========

**Amélioration côté développement interne :** ¨flake8 et ¨pylint sont consultés pour améliorer le code de ¨orpyste lorsque cela paraît pertinent.


==========
2016-11-06
==========

**Modification du type de clés autorisées :** on peut maintenant utiliser en fait n'importe quoi comme caractère excepté ceux correspondant à des séparateurs. Ces derniers sont par contre autorisés dans les valeurs.


==========
2016-11-05
==========

**Stockage au format ¨json des dictionnaires créés par la classe ``data.ReadBlock`` :** voici les deux fonctionnalités ajoutées.

    1) Ajout d'une méthode ``jsonify`` à la classe ``data.ReadBlock`` pour fabriquer une chaîne de caractères donnant une variable de type ¨json représentant l'un des dictionnaires proposés pour lire les données (ceci peut être utile pour un stockage permanent et/ou pour interagir avec d'autres applications).

    2) La fonction ``loadjson`` fait le travail inverse de la méthode ``data.ReadBlock.jsonify``.
