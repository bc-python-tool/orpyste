==============
orPySte - TODO
==============

**Amélioration de la classe ``clean.Clean`` :** il est maintenant possible de personnaliser le nombre d'espaces autour des blocs et des commentaires.


> ---------------------------- <

**Amélioration des docstrings de ``orpyste``:** la syntaxe utilisée se base sur de nouvelles spécifications de ¨pybadoc, un outil maison en cours de construction. On utilise des exemples "en console" pour rendre le propos plus clair, et on peut indiquer les signatures des fonctions, des classes, ¨etc via le bloc pybadoc::``prototype::...`` à placer en début de docstring. Très lisible et très efficace !


> ---------------------------- <

utilisation de constante à la place de chaînede caractères : plus sûre !!!!


> ---------------------------- <

**Utilisation de ``setuptools`` :** comme ``pip`` a décidé d'abandonner le support de ``distutils``, on utilise ``setuptools``, un outil plus sympathique à employer. Ceci se fait très efficacement grâce à ¨setytup un autre projet de l'auteur de ¨mistool qui est en cours de développement. ¨setytup est disponible sur ¨pypi et ¨github.


**Amélioration et mise à jour des tests :** voici ce qui a été fait.

1) On utilise maintenant ¨pytest ce qui simplifie énormément les choses. On va enfin à l'essentiel !

2) Les tests sont disponibles sur ¨github afin que les utilisateurs avertis puissent tester leur installation, mais ils ne le sont pas sur ¨pypi pour ne pas polluer ¨python lors d'une installation de ¨orpyste.

3) L'affreux package maison ``pdt`` n'est plus du tout utilisé (ceci a pu être fait car la nouvelle version de ¨orpyste n'est plus du tout dépendante de ¨mistool). Et oui, on se professionnalise... ;-)


> ---------------------------- <

???? ---------->    **Amélioration du fichier ``README.md`` :** des exemples "en console" ont été ajoutés afin de rendre le package plus "bankable".


> ---------------------------- <

**Amélioration côté développement interne :** voici ce qui a évolué.

    1) Dans un souci de développement serein, on utilise dorénavant ¨git via une branche ``dev``.

    2) L'utilisation de ¨pyvenv permet aussi d'éviter des dégâts colatéraux non négligeables avec les versions en cours de développement (l'environnement virtuel se nomme ``pyenv/orpyste``). Fini l'amateurisme !


> ---------------------------- <

en gradnat list des blocs imbriqués , on peut faire des opérations impoertantes : nom unique iy schéma unique bien pour xpath !


> ---------------------------- <

fair un système via clé de hashage qui ne refait le boulot que si nécessaire dans le cas d'un IOViwe sur disque dur


> ---------------------------- <

searching path !!!!


a::
    b::
        c::
            ...


c::
    ...


blocs c via "(.)c" : cf regex inrtégré
    ---> on surcharge dict via méthode qui permet de passer d'un path à la version clé par clé


> ---------------------------- <

???? Schema !!!!
**Une belle amélioration :** un modèle de données, éventuellement typées, peut être indiqué . Ceci se fait simplement, et sans surprise, via la définition d'un fichier modèle de type ¨peuf d'une façon analogue aux cf::``schémas JSON ; http://json-schema.org``.


> ---------------------------- <

**Amélioration côté développement interne :** voici ce qui a évolué.

    1) L'effacité des tests est évaluée à l'aide de ¨coverage.

    2) ¨pep8py et ¨pylint sont aussi consultés pour améliorer le code lorsque cela paraît pertinent.


> ---------------------------- <

**Mise en ligne d'une documentation non technique en français :** ceci a été rendu possible grâce au projet ¨pyba qui lui aussi est disponible sur ¨pypi et ¨github.


> ---------------------------- <

**Mise en ligne de la documentation technique en anglais uniquement :** ceci a été rendu possible grâce au projet ¨pybadoc qui lui aussi est disponible sur ¨pypi et ¨github.


> ---------------------------- <

cleaner
    ---> commentaire dans multi-key se placent relatovemnt à la clé-valeur en cours et no au tout début
