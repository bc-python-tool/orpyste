==============
orPySte - TODO
==============


> ---------------------------- <

???? ---------->    **Publication de la nouvelle version de ``orpyste`` :** le projet est à la fois hebergé sur le site ¨github et us ¨pypi.


???? ---------->    **Amélioration du fichier ``README.md`` :** des exemples "en console" ont été ajoutés afin de rendre le package plus "bankable".


???? ---------->    **Noms des versions :** les numéros de version deviennent standards en suivant la convention ``majeur.mineur.patch``, cette version ayant pour numéro ``0.0.0`` car le projet ¨mistool reste à l'état très `¨beta`. Cette norme étant suivie par tout le monde, soyons grégaire pour devenir clair...


???? ---------->    **Ajout d'une licence :** le projet est maintenant sous licence ???.


???? ---------->    **Utilisation de ``setuptools`` :** comme ``pip`` a décidé d'abandonner le support de ``distutils``, il a fallu accélérer l'utilisation de ``setuptools``, un outil plus sympathique à employer. Ceci se fait très efficacement grâce à ¨setytup un autre projet de l'auteur de ¨mistool. ¨setytup est disponible sur ¨pypi et ¨github.


> ---------------------------- <

???? ---------->    **Amélioration et mise à jour des tests :** voici ce qui a été fait.

    1) On utilise maintenant ¨pytest ce qui simplifie énormément les choses. On va enfin à l'essentiel !

    2) L'affreux package maison ``pdt`` n'est plus du tout utilisé (ceci a pu être fait car la nouvelle version de ¨orpyste n'est plus du tout dépendante de ¨mistool).

    1) Les tests sont disponibles sur ¨github et ¨pypi (afin que les utilisateurs puissent tester leur installation).


> ---------------------------- <

**Amélioration côté développement interne :** voici ce qui a évolué.

    1) L'effacité des tests est évaluée à l'aide de ¨coverage.

    2) ¨pep8py et ¨pylint sont aussi consultés pour améliorer le code de ¨orpyste lorsque cela paraît pertinent.


> ---------------------------- <

**Ajout du module ``clean``:** ce module contient une classe ``Beautify`` qui produit une version propre et standardisée d'un fichier ¨peuf.


> ---------------------------- <

**Mise en ligne d'une documentation non technique en français :** ceci a été rendu possible grâce au projet ¨pyba qui lui aussi est disponible sur ¨pypi et ¨github.


**Mise en ligne de la documentation technique en anglais uniquement :** ceci a été rendu possible grâce au projet ¨pybadoc qui lui aussi est disponible sur ¨pypi et ¨github.


> ---------------------------- <

**Une belle amélioration !** Il est maintenant possible d'indiquer un modèle de données éventuellement typées. Ceci se fait simplement, et sans surprise, via la définition d'un fichier modèle de type ¨peuf d'une façon analogue cf::``aux schémas JSON ; http://json-schema.org``.
